from linked_list import LinkedList


def merge_sort(self):
    return merge_sort_helper(self.head, self.tail)


def find_mid(start, end):
    current = start
    prev = None
    count = 0
    temp = start
    while temp <> end:
        temp = temp.next
        count += 1
        if count %2 ==1:
            prev = current
            current = current.next
    count += 1
    if count % 2 == 1:
        prev = current
        current = current.next

    mid = prev
    mid_next = current
    return mid, mid_next


def merge_sort_helper(start, end):
    if start == end:
        return start

    mid, mid_next = find_mid(start,end)
    left_half = merge_sort_helper(start, mid)
    right_half = merge_sort_helper(mid_next, end)
    return merge_list(left_half, right_half)


def merge_list(l1, l2):
    list3 = LinkedList()
    # l1 = list1.head
    # l2 = list2.head
    # l3 = list3.head

    while l1 and l2:
        if l1.value == l2.value:
            list3.add_last(l1.value)
            list3.add_last(l2.value)
            l1 = l1.next
            l2 = l2.next
        elif l1.value < l2.value:
            list3.add_last(l1.value)
            l1 = l1.next
        else:
            list3.add_last(l2.value)
            l2 = l2.next
    while l1:
        list3.add_last(l1.value)
        l1 = l1.next

    while l2:
        list3.add_last(l2.value)
        l2 = l2.next
    return str(list3)


list1 = LinkedList()
list1.add_last(23)
list1.add_last(27)
list1.add_last(24)
list1.add_last(25)
list1.add_last(28)
print merge_sort(list1)




